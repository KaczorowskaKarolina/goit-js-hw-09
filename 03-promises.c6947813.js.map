{"mappings":"qhBA6BA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EAEFM,YAAW,KACTF,EAAQ,C,SAAEN,E,MAAUC,GAAQ,GAC3BA,GAGHO,YAAW,KACTD,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAC1BA,EAAM,G,CAMf,IAAI,IAAIQ,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAAyDV,EAAcU,EAAvDN,KAAKO,MAAsB,IAAhBP,KAAKC,UAAmB,KAA+BO,MAAK,EAACX,SAAEA,EAAQC,MAAEA,MAAcW,EAAAf,GAASgB,OAAOC,QAAQ,gDAAkD,IAAMC,OAAM,EAACf,SAAEA,EAAQC,MAAEA,MAAcW,EAAAf,GAASgB,OAAOG,QAAQ,+CAA+C,G","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       // Resolve\n//       setTimeout(() => {\n//         resolve({ position, delay });\n//       }, delay);\n//     } else {\n//       // Reject\n//       setTimeout(() => {\n//         reject({ position, delay });\n//       }, delay);\n//     }\n//   });\n\n// }\n// for(let i = 1; i <= 5; i++) { const delay = Math.floor(Math.random() * 3000) + 1000;\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// }\n\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      // Resolve\n      setTimeout(() => {\n        resolve({ position, delay });\n      }, delay);\n    } else {\n      // Reject\n      setTimeout(() => {\n        reject({ position, delay });\n      }, delay);\n    }\n  });\n\n}\n\nfor(let i = 1; i <= 5; i++) { const delay = Math.floor(Math.random() * 3000) + 1000; createPromise(i, delay) .then(({ position, delay }) => { Notiflix.Notify.success('✅ Fulfilled promise ${position} in ${delay}ms'); }) .catch(({ position, delay }) => { Notiflix.Notify.failure('❌ Rejected promise ${position} in ${delay}ms'); }); }"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","i","floor","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.c6947813.js.map"}